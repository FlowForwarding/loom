@ngdoc overview
@name Tutorial: 306 Expandable grid
@description

Module 'ui.grid.expandable' adds the subgrid feature to grid. To show the subgrid you need to provide following grid option:

<pre>
  $scope.gridOptions = {
    //This is the template that will be used to render subgrid.
    expandableRowTemplate: 'expandableRowTemplate.html',
    //This will be the height of the subgrid
    expandableRowHeight: 140
  }
</pre>

rowExpandableTemplate will be template for subgrid and expandableRowHeight will be height of the subgrid. The grid api
provided following events and methods fos subGrids:

<pre>
    //rowExpandedStateChanged is fired for each row as its expanded:
    gridApi.expandable.on.rowExpandedStateChanged($scope,function(row){
    });
    //Following methods can be used to expand/ collapse all rows of the grid:
    gridApi.expandable.expandAllRows();
    gridApi.expandable.collapseAllRows();
</pre>

SubGrid nesting can be done upto multiple levels.

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ui.grid', 'ui.grid.expandable', 'ui.grid.selection', 'ui.grid.pinning']);

    app.controller('MainCtrl', ['$scope', '$http', '$log', function ($scope, $http, $log) {
      $scope.gridOptions = {
        expandableRowTemplate: 'expandableRowTemplate.html',
        expandableRowHeight: 150
      }

      $scope.gridOptions.columnDefs = [
        { name: 'id' },
        { name: 'name'},
        { name: 'age'},
        { name: 'address.city'}
      ];

      $http.get('/data/500_complex.json')
        .success(function(data) {
          for(i = 0; i < data.length; i++){
            data[i].subGridOptions = {
              columnDefs: [ {name:"Id", field:"id"},{name:"Name", field:"name"} ],
              data: data[i].friends
            }
          }
          $scope.gridOptions.data = data;
        });

        $scope.gridOptions.onRegisterApi = function(gridApi){
          $scope.gridApi = gridApi;
        };

        $scope.expandAllRows = function() {
          $scope.gridApi.expandable.expandAllRows();
        }

        $scope.collapseAllRows = function() {
          $scope.gridApi.expandable.collapseAllRows();
        }
    }]);

    app.controller('SecondCtrl', ['$scope', '$http', '$log', function ($scope, $http, $log) {
          $scope.gridOptions = {
            enableRowSelection: true,
            expandableRowTemplate: 'expandableRowTemplate.html',
            expandableRowHeight: 150
          }

          $scope.gridOptions.columnDefs = [
            { name: 'id', pinnedLeft:true },
            { name: 'name'},
            { name: 'age'},
            { name: 'address.city'}
          ];

          $http.get('/data/500_complex.json')
            .success(function(data) {
              for(i = 0; i < data.length; i++){
                data[i].subGridOptions = {
                  columnDefs: [ {name:"Id", field:"id"},{name:"Name", field:"name"} ],
                  data: data[i].friends
                }
              }
              $scope.gridOptions.data = data;
            });
        }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div class="control-group">
        <input type="button" class="btn btn-small" ng-click="expandAllRows()" value="Expand All"/>
        <input type="button" class="btn btn-small" ng-click="collapseAllRows()" value="Collapse All"/>
      </div>
      <div ui-grid="gridOptions" ui-grid-pinning ui-grid-expandable class="grid"></div>
    </div>
    Expandable rows works with checkboxes from selection and left pins
    <div ng-controller="SecondCtrl">
       <div ui-grid="gridOptions" ui-grid-pinning ui-grid-expandable ui-grid-selection class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 100%;
      height: 400px;
    }
  </file>
  <file name="expandableRowTemplate.html">
    <div ui-grid="row.entity.subGridOptions" style="height:140px;"></div>
  </file>
</example>