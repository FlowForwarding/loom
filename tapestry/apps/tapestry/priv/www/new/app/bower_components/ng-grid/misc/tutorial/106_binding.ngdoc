@ngdoc overview
@name Tutorial: 106 Binding examples
@description

UI-Grid supports complex object binding in the colDef.field.

This tutorial shows two-way binding to properties with special characters, array element, nested property, and function.

Note that a function can not be edited.

In your custom cellTemplates, you can use:
<br/>
COL\_FIELD which will be replaced with grid.getCellValue(row). This should be used for any cellTemplates that need readonly access to the field value
<br/>
MODEL\_COL\_FIELD which will be replaced with row.entity.field.  Use MODEL\_COL\_FIELD anytime you need ng-model='field'



@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ui.grid', 'ui.grid.edit']);

    app.controller('MainCtrl', ['$scope', function ($scope) {

    $scope.gridOptions = {
            enableSorting: true,
            columnDefs: [
              { name:'firstName', field: 'first-name' },
              { name:'1stFriend', field: 'friends[0]' },
              { name:'city', field: 'address.city'},
              { name:'getZip', field: 'getZip()', enableCellEdit:false}
            ],
            data : [      {
                               "first-name": "Cox",
                               "friends": ["friend0"],
                               "address": {street:"301 Dove Ave", city:"Laurel", zip:"39565"},
                               "getZip" : function() {return this.address.zip;}
                           }
                       ]
          };

    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div id="grid1" ui-grid="gridOptions" ui-grid-edit class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 250px;
    }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    it('grid should have one visible row and four columns', function () {
      gridTestUtils.expectRowCount( 'grid1', 1 );
      gridTestUtils.expectHeaderColumnCount( 'grid1', 4 );
    });

    it('headers as specified', function () {
      gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'First Name' );
      gridTestUtils.expectHeaderCellValueMatch( 'grid1', 1, '1st Friend' );
      gridTestUtils.expectHeaderCellValueMatch( 'grid1', 2, 'City' );
      gridTestUtils.expectHeaderCellValueMatch( 'grid1', 3, 'Get Zip' );
    });

    it('row values should be as expected', function () {
      gridTestUtils.expectRowValuesMatch( 'grid1', 0, [ 'Cox', 'friend0', 'Laurel', '39565' ]);
    });
  </file>  
</example>