@ngdoc overview
@name Tutorial: 201 Edit Feature
@description

The ui.grid.edit feature allows inline editing of grid data.  To enable, you must include the `'ui.grid.edit'` module
and you must include the `ui-grid-edit` directive on your grid element.

You can use the `enableCellEdit` options in your column definitions to allow a column to be editable.

Editing is invoked via double-click, f2, or start typing any non-navigable key. Cell editing ends on tab, enter or esc (cancel)
on an input editor, and tab, left or right arrows, enter or esc for a dropdown.

By default an input element is provided, with numeric, date and checkbox editors for fields specified as `'number'`, `'date'`
and `'boolean'` types, for all other fields a simple text editor is provided.

A dropdown editor is also available, through setting the `editableCellTemplate` on the `columnDef` to `'ui-grid/dropdownEditor'`.
When using a dropdown editor you need to provide an options array through the `editDropDownOptionsArray` property on the `columnDef`.
This array by default should be an array of `{id: xxx, value: xxx}`, although the field tags can be changed through
using the `editDropdownIdLabel` and `editDropdownValueLabel` options.

Custom edit templates should be used for any editor other than the default editors, but be aware that you will likely also
need to provide a custom directive similar to the uiGridEditor directive so as to provide `BEGIN_CELL_EDIT, CANCEL_CELL_EDIT
and END_CELL_EDIT` events.

__ColumnDef Options__:

- `editableCellTemplate` (default: `'ui-grid/cellEditor'`) - Valid html, templateCache Id,  or url that returns html
  content to be compiled when edit mode is invoked.
- `enableCellEdit` (default: `false` for columns of type `'object'`, `true` for all other columns) - `true` will enable
  editing and `false` will disable it.
- `cellEditableCondition`  (default: `true`)  Can be set to a boolean or a function that will be called with the cellScope
  to determine if the cell should be invoked in edit mode.
- `type` (default: `'string'`) If set to `'number'`, `'boolean'` or `'date'` the default editor provided for editing will be numeric
  or boolean or date editor respectively.  If set to `'object'` the column will not be editable by default.  Be aware that this
  `type` column is also used for other purposes within ui-grid, including the sorting logic.
- `editDropdownOptionsArray` If a dropdown, needs to be populated with an array of values, by default those values should be
  `{id: xxx, value: xxx}`, the labels can be adjusted with the next two options
- `editDropdownIdLabel` (default: `'id'`) Controls the id label in the options array - so if your array happens to contain
   `'code'` instead you can use it without having to reprocess the array
- `editDropdownValueLabel` (default: `'value'`) Controls the value label in the options array - if your array happens to
  contain `'name'` instead you can use it without having to reprocess the array
- `editDropdownFilter` (default: `''`) Allows you to apply a filter to the values in the edit dropdown options, for example
  if you were using angular-translate you would set this to `'translate'`

The following option is available only if using cellNav feature

- `enableCellEditOnFocus` - `true` to invoke editor as soon as cell has focus

<pre>
$scope.gridOptions.columnDefs = [
   { name: 'name', enableCellEdit: true, editableCellTemplate: 'xxxxxxx' },
   { name: 'age', enableCellEdit: true, type: 'number'},
   { name: 'registered', displayName: 'Registered' , type: 'date'},
   { name: 'address', displayName: 'Address', type: 'object'},
   { name: 'address.city', enableCellEdit: true, displayName: 'Address (even rows editable)', cellEditableCondition: function($scope){return $scope.rowRenderIndex%2} }
   { name: 'isActive', enableCellEdit: true, type: 'boolean'},
]
</pre>


@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ui.grid', 'ui.grid.edit', 'addressFormatter']);

    angular.module('addressFormatter', []).filter('address', function () {
      return function (input) {
          return input.street + ', ' + input.city + ', ' + input.state + ', ' + input.zip;
      };
    });

    app.controller('MainCtrl', ['$scope', '$http', function ($scope, $http) {
      $scope.gridOptions = {  };

      $scope.gridOptions.columnDefs = [
        { name: 'id', enableCellEdit: false, width: '10%' },
        { name: 'name', displayName: 'Name (editable)', width: '20%' },
        { name: 'age', displayName: 'Age' , type: 'number', width: '10%' },
        { name: 'gender', displayName: 'Gender', editableCellTemplate: 'ui-grid/dropdownEditor', width: '20%',
          cellFilter: 'mapGender', editDropdownValueLabel: 'gender', editDropdownOptionsArray: [
          { id: 1, gender: 'male' },
          { id: 2, gender: 'female' }
        ] },
        { name: 'registered', displayName: 'Registered' , type: 'date', cellFilter: 'date:"yyyy-MM-dd"', width: '20%' },
        { name: 'address', displayName: 'Address', type: 'object', cellFilter: 'address', width: '30%' },
        { name: 'address.city', displayName: 'Address (even rows editable)', width: '20%',
             cellEditableCondition: function($scope){
             return $scope.rowRenderIndex%2
             }
        },
        { name: 'isActive', displayName: 'Active', type: 'boolean', width: '10%' }
      ];



     $scope.msg = {};

     $scope.gridOptions.onRegisterApi = function(gridApi){
              //set gridApi on scope
              $scope.gridApi = gridApi;
              gridApi.edit.on.afterCellEdit($scope,function(rowEntity, colDef, newValue, oldValue){
                $scope.msg.lastCellEdited = 'edited row id:' + rowEntity.id + ' Column:' + colDef.name + ' newValue:' + newValue + ' oldValue:' + oldValue ;
                $scope.$apply();
              });
            };

      $http.get('/data/500_complex.json')
        .success(function(data) {
          for(i = 0; i < data.length; i++){
            data[i].registered = new Date(data[i].registered);
            data[i].gender = data[i].gender==='male' ? 1 : 2;
          }
          $scope.gridOptions.data = data;
        });
    }])

    .filter('mapGender', function() {
      var genderHash = {
        1: 'male',
        2: 'female'
      };

      return function(input) {
        if (!input){
          return '';
        } else {
          return genderHash[input];
        }
      };
    })
  });
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <strong>Data Length:</strong> {{ gridOptions.data.length | number }}
      <br>
      <strong>Last Cell Edited:</strong> {{msg.lastCellEdited}}
      <br>
      <div ui-grid="gridOptions" ui-grid-edit class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 600px;
      height: 450px;
    }
  </file>
</example>