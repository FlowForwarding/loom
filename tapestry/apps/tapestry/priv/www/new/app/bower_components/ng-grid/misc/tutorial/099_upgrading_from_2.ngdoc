@ngdoc overview
@name Tutorial: 099 Upgrading
@description

## Upgrading from 2.x to 3.0 ##

ui-grid 3.0 is a substantial upgrade from ng-grid 2.x, with the majority of the code base having 
been rewritten.  Where possible the configuration is backward compatible, but some concepts have
changed in ways that require code change to integrate.

This tutorial covers the key elements that may require adjusting in your application.


### Module Name ###
Previously you included the grid within your application using:
<pre>
  angular.module( 'yourApplication', [
    'ngGrid'
  ]);
</pre>

You now include ui.grid instead, and may optionally also include the modules for features
that you choose to enable:
<pre>
  angular.module( 'yourApplication', [
    'ui.grid',
    'ui.grid.edit'
  ]);
</pre>


### Grid Directive ###
Similarly, the directive name has changed, and you may choose to include additional features
within your grid.

Previously you had:
<pre>
  <div class="gridStyle" ng-grid="gridOptions"></div>
</pre>

You now include multiple directives for each of the features you wish to use:
<pre>
  <div class="gridStyle" ui-grid="gridOptions" ui-grid-edit></div>
</pre>


### Update columnDefs ###
All columns must have a name or a field.  If you have columns that have neither
you need to define one.  Name will be derived from field if not present.
<pre>
$scope.gridOptions = {
    columnDefs: [
      {field: 'id', displayName: 'Id'},
      {field: 'name', displayName: 'Name'},
      {displayName: 'Edit', cellTemplate: '<button id="editBtn" type="button" class="btn-small" >Edit</button> '}
    ]    
  };
</pre>

Becomes:
<pre>
$scope.gridOptions = {
    columnDefs: [
      {field: 'id', displayName: 'Id'},
      {field: 'name', displayName: 'Name'},
      {name: 'edit', displayName: 'Edit', cellTemplate: '<button id="editBtn" type="button" class="btn-small" ng-click="edit(row.entity)" >Edit</button> '}
    ]    
  };
</pre>

String values are no longer supported for columns defs:
<pre>
  $scope.myColDefs = {[...]};
  $scope.gridOptions.columnDefs = 'myColDefs'
</pre>

<pre>
$scope.gridOptions.columnDefs = $scope.myColDefs = [...];
</pre>
or
<pre>
$scope.gridOptions.columnDefs = [...];
</pre>


### Accessing cell values ###

In 2.x you would use `row.getProperty(col.field)` within a cellTemplate to get the value of a cell. In 3.0 this has changed to `grid.getCellValue(row, col)`.


### External scopes must be declared ###
The grid now uses an isolate scope, meaning that the scope on your controller is not directly accessible
to widgets that you include in the grid.  You now need to declare an external scope (refer associated tutorial).

<pre>
$scope.gridOptions = {
    columnDefs: [
      {field: 'id', displayName: 'Id'},
      {field: 'name', displayName: 'Name'},
      {name: 'edit', displayName: 'Edit', cellTemplate: '<button id="editBtn" type="button" class="btn-small" ng-click="edit(row.entity)" >Edit</button> '}
    ]    
  };
</pre>

becomes:
<pre>
$scope.gridOptions = {
    columnDefs: [
      {field: 'id', displayName: 'Id'},
      {field: 'name', displayName: 'Name'},
      {name: 'edit', displayName: 'Edit', cellTemplate: '<button id="editBtn" type="button" class="btn-small" ng-click="getExternalScopes().edit(row.entity)" >Edit</button> '}
    ]    
  };
</pre>

You also need to declare the external scope within your controller:
<pre>
  $scope.myScope = {
    edit: function( row ) {
      // do something
    }
  };
</pre>

And on the grid directive:
<pre>
  <div class="gridStyle" ui-grid="gridOptions" external-scopes="myScope" ></div>
</pre>


### Separate features ###
Many elements included by default in ng-grid have now been shifted into separate features, allowing the
core ng-grid to be kept smaller and faster.  Features are enabled only when included, inclusion of a feature
requires both including the module in your application and adding the feature directive onto the grid
definition.

Features include:

* column resizing
* selection
* cell navigation and selection of individual cells
* editing in place

For example, to include the selection feature, you would include the module:
<pre>
  angular.module( 'yourApplication', [
    'ui.grid',
    'ui.grid.edit'
  ]);
</pre>

and include the relevant directive on the grid that you wish to have access to the feature:
<pre>
  <div class="gridStyle" ui-grid="gridOptions" ui-grid-edit ui-grid-selection></div>
</pre>

### Filtering and Sorting ###
The filtering api changes substantially, as filters are now per-column rather than for the grid as
a whole.  Refer the filtering documentation, the key change is that filters are now stored on the
individual columns rather than as a single filterOptions element.

Sorting behaviour changes somewhat, and again sort options are moved onto the individual columns,
along with provision of a "priority" element within the sortOptions.
  
