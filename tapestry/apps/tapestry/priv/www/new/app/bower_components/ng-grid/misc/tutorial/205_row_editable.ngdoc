@ngdoc overview
@name Tutorial: 205 Row Edit Feature
@description

The ui.grid.rowedit extends the edit feature to support callbacks for server saving of the data,
with that data saved "row at a time."  This feature attempts to give a user an experience similar
to a spreadsheet - in that they can edit whichever fields they wish, and the feature will seek to
save the data "row at a time".  To the extent that the data doesn't generate errors, from a user
perspective the saving is almost invisible - rows occassionally go grey (saving) and can't be edited whilst
grey, but otherwise the user edits as if the data were local.  

Each row is in one of four states at any point in time:

- clean:  No edits have been made (or no edits since the last save)
- `isDirty`:  Edits have been made, but the data has not yet been saved, either because the 
  user is still editing the row or because the timer hasn't triggered as yet
- `isSaving`: The callback to save the row has been called and has not yet returned.  The row is
  not editable during this time, and is shown as greyed out, so as to avoid the user 
  causing locking exceptions by editing the row again
- `isError`: The save callback returned an error.  The row still has the updated data displayed,
  but will be shown in red
  
The basic method of operation is that whenever a cell is edited (identified using the `edit.afterCellEdit`
event) an `isDirty` flag is set on the row, and a `saveTimer` is set.  If another cell in the same row commences
editing within 2 seconds (or other configurable time), then the timer will be destroyed again.  Otherwise
upon the timer completing the row will be set to a status of `isSaving` and greyed out, and the `saveRow`
event will be called.  The function called by this event must return a promise, and the rowedit feature
will wait on that promise.

If the cellNav feature is also enabled, then a setFocus on a cell within the row is sufficient to delay
the timer (this more easily deals with situations where only some columns are editable, and a user tabs
or clicks to a non-editable field on the same row).

If the promise is successfully resolved then the row is set back to clean.  If the promise is rejected then the 
row is set to a status of `isError`.

Optionally, the calling application can request `flushDirtyRows`, which will trigger the save event for all
currently dirty rows.  If the `rowEditWaitInterval` grid option is set to -1, then saves will never be triggered
by timer, and only be triggered when manually called.

Methods and properties are provided to operate with this regime:

- `getDirtyRows()`: returns an array of gridRows of all currently dirty rows
- `getErrorRows()`: returns an array of gridRows of all currently errored rows
- `flushDirtyRows()`: flushes all currently dirty rows to the server, might be used 
  on a page navigation request or pressing of a save button
- `saveRow( rowEntity )`: event called when a row is ready for saving
- `rowEditWaitInterval`: grid option that controls how long a wait will be before a save is triggered (in ms)


@example
In this example rows are saved 2 seconds after moving off, and the save is faked using a timeout of 3 seconds, so 
each save will take 3 seconds to complete.  Any row saved with a gender of "male" will error.

<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ui.grid', 'ui.grid.edit', 'ui.grid.rowEdit', 'ui.grid.cellNav', 'addressFormatter']);

    angular.module('addressFormatter', []).filter('address', function () {
      return function (input) {
          return input.street + ', ' + input.city + ', ' + input.state + ', ' + input.zip;
      };
    });

    app.controller('MainCtrl', ['$scope', '$http', '$q', '$interval', function ($scope, $http, $q, $interval) {
      $scope.gridOptions = {};

      $scope.gridOptions.columnDefs = [
        { name: 'id', enableCellEdit: false },
        { name: 'name', displayName: 'Name (editable)' },
        { name: 'gender' },
        { name: 'age', displayName: 'Age' , type: 'number'},
        { name: 'registered', displayName: 'Registered' , type: 'date', cellFilter: 'date:"yyyy-MM-dd"'},
        { name: 'address', displayName: 'Address', type: 'object', cellFilter: 'address'},
        { name: 'address.city', displayName: 'Address (even rows editable)',
             cellEditableCondition: function($scope){
             return $scope.rowRenderIndex%2
             }
        },
        { name: 'isActive', displayName: 'Active', type: 'boolean'}
      ];

      $scope.saveRow = function( rowEntity ) {
        // create a fake promise - normally you'd use the promise returned by $http or $resource
        var promise = $q.defer();
        $scope.gridApi.rowEdit.setSavePromise( $scope.gridApi.grid, rowEntity, promise.promise );
       
        // fake a delay of 3 seconds whilst the save occurs, return error if gender is "male"
        $interval( function() {
          if (rowEntity.gender === 'male' ){
            promise.reject();
          } else {
            promise.resolve();
          }
        }, 3000, 1);
      }; 

      $scope.gridOptions.onRegisterApi = function(gridApi){
        //set gridApi on scope
        $scope.gridApi = gridApi;
        gridApi.rowEdit.on.saveRow($scope, $scope.saveRow);
      };
  
      $http.get('/data/500_complex.json')
      .success(function(data) {
        for(i = 0; i < data.length; i++){
          data[i].registered = new Date(data[i].registered);
        }
        $scope.gridOptions.data = data;
      });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div ui-grid="gridOptions" ui-grid-edit ui-grid-row-edit ui-grid-cellNav class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 600px;
      height: 450px;
    }
  </file>
</example>