@ngdoc overview
@name Tutorial: 105 Footer
@description

The grid supports a footer row, which can be displayed if showFooterRow option is set to true.
You can set an aggregation function for each column or use a custom footer template to display 
what ever aggregation you wish.
Aggregation functions supported are: sum, avg, row count, min, max.
You need to inject the uiGridConstants in order to use aggregationTypes enum.
You can also pass in a function in order to create your own aggregation logic.
If you set the `aggregationHideLabel` option on the columnDef to true, then the column will
show the aggregation but without a label.  Refer the third column in the example below.

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ui.grid']);

    app.controller('MainCtrl', ['$scope','uiGridConstants', '$http', function ($scope, uiGridConstants, $http) {
    var data = [];

    $scope.gridOptions = {
        showFooter: true,
        enableFiltering: true,
        columnDefs: [
            { field: 'name', width: 150, aggregationType: uiGridConstants.aggregationTypes.count },
            { field: 'address.street',aggregationType: uiGridConstants.aggregationTypes.sum, width: 150 },
            { field: 'age', aggregationType: uiGridConstants.aggregationTypes.avg, aggregationHideLabel: true, width: 100 },
            { name: 'ageMin', field: 'age', aggregationType: uiGridConstants.aggregationTypes.min, width: 130, displayName: 'Age for min' },
            { name: 'ageMax', field: 'age', aggregationType: uiGridConstants.aggregationTypes.max, width: 130, displayName: 'Age for max' },
            { name: 'customCellTemplate', field: 'age', width: 150, footerCellTemplate: '<div class="ui-grid-cell-contents" style="background-color: Red;color: White">custom template</div>' }
        ],
        data: data
    }

    $http.get('/data/500_complex.json')
      .success(function(data) {
        $scope.gridOptions.data = data;
      });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <button id="footerButton" class="btn btn-success" ng-click="gridOptions.showFooter = !gridOptions.showFooter">Toggle Footer</button>
      <div id="grid1" ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 100%;
      height: 250px;
    }
  </file>

  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    describe( '105 footer', function() {
      it('grid should have six visible columns', function () {
        gridTestUtils.expectHeaderColumnCount( 'grid1', 6 );
      });
  
      it('grid should have six visible columns in footer', function () {
        gridTestUtils.expectFooterColumnCount( 'grid1', 6 );
      });
  
      it('grid should have footers with specific values', function () {
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 0, 'total rows: 500' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 1, 'total: 281568' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 2, '30.196' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 3, 'min: 20' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 4, 'max: 40' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 5, 'custom template' );
      });
  
      it('filter and expect recalculate', function () {
        gridTestUtils.enterFilterInColumn( 'grid1', 1, '3' );        
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 0, 'total rows: 56' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 1, 'total: 19805' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 2, '29.375' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 3, 'min: 20' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 4, 'max: 39' );
        gridTestUtils.expectFooterCellValueMatch( 'grid1', 5, 'custom template' );
      });
    });
  </file>
</example>
